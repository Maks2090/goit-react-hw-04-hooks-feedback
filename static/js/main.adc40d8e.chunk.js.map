{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["module","exports","FeedbackOptions","onLeaveFeedback","options","keyObject","Object","keys","className","css","list","map","nameButton","key","item","button","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","text","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","state","countTotalFeedback","feedback","values","reduce","name","prevState","goodFeedback","totalFeedback","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,KAAO,2B,gBCAzDD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,KAAO,8BAA8B,OAAS,kC,mBCArGD,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,KAAO,6B,qICEV,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,QACjDC,EAAYC,OAAOC,KAAKH,GAC9B,OACI,mCACI,oBAAII,UAAWC,IAAIC,KAAnB,SACKL,EAAUM,KAAI,SAACC,EAAYC,GAAb,OACX,oBAAIL,UAAWC,IAAIK,KAAnB,SACI,wBAAQN,UAAWC,IAAIM,OACnBC,KAAK,SACLC,QAAS,kBAAMd,EAAgBS,IAFnC,SAIKA,KALqBC,U,oBCNnC,SAASK,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC5D,OACI,mCACI,qBAAIf,UAAWC,IAAIC,KAAnB,UAEI,6BAAI,oBAAGF,UAAWC,IAAIe,KAAlB,mBAA+BL,OAEnC,6BAAI,oBAAGX,UAAWC,IAAIe,KAAlB,sBAAkCJ,OAEtC,6BAAI,oBAAGZ,UAAWC,IAAIe,KAAlB,kBAA8BH,OAElC,6BAAI,oBAAGb,UAAWC,IAAIe,KAAlB,oBAAgCF,OAEpC,6BAAI,oBAAGd,UAAWC,IAAIe,KAAlB,gCAA4CD,EAA5C,e,oBCbL,SAASE,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACrC,OACI,oCACI,oBAAInB,UAAWC,IAAIiB,MAAnB,SAA2BA,IAC1BC,K,oBCEEC,EANM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OACI,mBAAGrB,UAAWC,IAAIe,KAAlB,SAAyBK,KCGlB,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOX,EAAP,KAAgBa,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOV,EAAP,KAAYa,EAAZ,KACMC,EAAQ,CAAEhB,OAAMC,UAASC,OAmBzBe,EAAqB,SAACC,GAM1B,OAJuB/B,OAAOgC,OAAOD,GACAE,QAAO,SAACjB,EAAOe,GAClD,OAAQf,EAASe,IAChB,IAaL,OACE,qCAEE,cAACZ,EAAD,CACEC,MAAM,wBADR,SAGE,cAAExB,EAAF,CACEE,QAAS+B,EACThC,gBA3CU,SAACqC,GACjB,OAAQA,GACN,IAAK,OACHR,GAAQ,SAACS,GAAD,OAAeA,EAAY,KACnC,MACF,IAAK,UACHR,GAAW,SAACQ,GAAD,OAAeA,EAAY,KACtC,MACF,IAAK,MACHP,GAAO,SAACO,GAAD,OAAeA,EAAY,WA0CpC,cAAChB,EAAD,CACEC,MAAM,aADR,SAGiC,IAA9BU,EAAmBD,GAAgB,cAAC,EAAD,CAAcN,QAAQ,sBACxD,cAACX,EAAD,CACEC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,EAAmBD,GAC1BZ,mBAjC8B,SAACc,GACvC,IAAMK,EAAeL,EAASlB,KAExBwB,EADiBrC,OAAOgC,OAAOD,GACAE,QAAO,SAACjB,EAAOe,GAClD,OAAQf,EAASe,IAChB,GACH,OAAOO,KAAKC,MAAOH,EAAeC,EAAiB,KA2BvBG,CAAgCX,UCpEhEY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnB,EAAD,MAEFoB,SAASC,eAAe,W","file":"static/js/main.adc40d8e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__2CtgD\",\"text\":\"Statistics_text__2lsbU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FeedbackOptions_list__1tLlS\",\"item\":\"FeedbackOptions_item__2zEku\",\"button\":\"FeedbackOptions_button__3bOIg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__1Hxm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__1__Xa\"};","import PropTypes from 'prop-types';\r\nimport css from \"../FeedbackOptions/FeedbackOptions.module.css\";\r\n\r\nexport default function FeedbackOptions({ onLeaveFeedback, options }) {\r\n    const keyObject = Object.keys(options);\r\n    return (\r\n        <>\r\n            <ul className={css.list}>\r\n                {keyObject.map((nameButton, key) => (\r\n                    <li className={css.item} key={key}>\r\n                        <button className={css.button}\r\n                            type=\"button\"\r\n                            onClick={() => onLeaveFeedback(nameButton)}\r\n                        >\r\n                            {nameButton}\r\n                        </button>\r\n                    </li>\r\n                ))\r\n                }\r\n            </ul>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.shape({\r\n        good: PropTypes.number.isRequired,\r\n        neutral: PropTypes.number.isRequired,\r\n        bad: PropTypes.number.isRequired,\r\n    }),\r\n}","import PropTypes from 'prop-types';\r\nimport css from './Statistics.module.css'\r\n\r\nexport default function Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n    return (\r\n        <>\r\n            <ul className={css.list} >\r\n\r\n                <li><p className={css.text}>Good: {good}</p></li>\r\n\r\n                <li><p className={css.text}>Neutral: {neutral}</p></li>\r\n\r\n                <li><p className={css.text}>Bad: {bad}</p></li>\r\n\r\n                <li><p className={css.text}>Total: {total}</p></li>\r\n\r\n                <li><p className={css.text}>Positive feedback: {positivePercentage} %</p></li>\r\n\r\n            </ul>\r\n\r\n\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n}","import PropTypes from 'prop-types';\r\nimport css from './Section.module.css'\r\n\r\nexport default function Section({ title, children }) {\r\n    return (\r\n        <section>\r\n            <h2 className={css.title}>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}","import PropTypes from 'prop-types';\r\nimport css from './Notification.module.css'\r\n\r\nconst Notification = ({ message }) => {\r\n    return (\r\n        <p className={css.text}>{message}</p>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}","import { useState } from \"react\";\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\nimport Statistics from './components/Statistics/Statistics'\nimport Section from \"./components/Section/Section\";\nimport Notification from \"./components/Notification/Notification\";\nimport PropTypes from 'prop-types';\n\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const state = { good, neutral, bad };\n\n  const increment = (name) => {\n    switch (name) {\n      case \"good\":\n        setGood((prevState) => prevState + 1);\n        break\n      case \"neutral\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n      case \"bad\":\n        setBad((prevState) => prevState + 1);\n        break;\n      default:\n        break;\n    }\n\n  };\n\n  const countTotalFeedback = (feedback) => {\n\n    const valuesFeedback = Object.values(feedback)\n    const totalFeedback = valuesFeedback.reduce((total, feedback) => {\n      return (total += feedback);\n    }, 0);\n    return totalFeedback;\n\n  }\n\n  const countPositiveFeedbackPercentage = (feedback) => {\n    const goodFeedback = feedback.good;\n    const valuesFeedback = Object.values(feedback)\n    const totalFeedback = valuesFeedback.reduce((total, feedback) => {\n      return (total += feedback);\n    }, 0);\n    return Math.round((goodFeedback / totalFeedback) * 100);\n  }\n  return (\n    <>\n\n      <Section\n        title=\"Please leave feedback\"\n      >\n        < FeedbackOptions\n          options={state}\n          onLeaveFeedback={increment}\n        />\n\n      </Section>\n\n\n\n\n      <Section\n        title=\"Statistics\"\n      >\n        {countTotalFeedback(state) === 0 ? (<Notification message=\"No feedback given\" />) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback(state)}\n            positivePercentage={countPositiveFeedbackPercentage(state)}\n          />\n        )}\n\n\n      </Section>\n\n    </>\n\n\n  )\n}\n\n\n\nApp.propTypes = {\n  state: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }),\n  countTotalFeedback: PropTypes.func,\n  countPositiveFeedbackPercentage: PropTypes.func,\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}